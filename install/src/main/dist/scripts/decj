#!/bin/bash

#
# Some commands have arguments with embedded spaces.
# Need to preserve the # grouping, so enclose every argument in quotes.
#

SCRIPT=$(readlink -f "$0")
# Absolute path this script is in, thus /home/user/bin
APP_PATH=$(dirname "$SCRIPT")
# Get the directory above bin for DCSTOOL_HOME
DH=$(realpath "${APP_PATH}/..")

# Make sure DCSTOOL_HOME is set
if [ -z "$DCSTOOL_HOME" ]
then
  DCSTOOL_HOME=$DH
  export DCSTOOL_HOME
elif [ "$DH" != "$(realpath ${DCSTOOL_HOME})" ]
then
  echo "Environment has set a different DCSTOOL_HOME than the location of the application start script."
  echo "Environment $DCSTOOL_HOME"
  echo "Location    $DH"
  echo "This may cause incorrect operation."
fi


# Make sure DECODES_INSTALL_DIR is set
if [ -z "$DECODES_INSTALL_DIR" ]
then
  DECODES_INSTALL_DIR=$DH
  export DECODES_INSTALL_DIR
fi

# Make sure DCSTOOL_USERDIR is set
if [ -z "$DCSTOOL_USERDIR" ]
then
  DCSTOOL_USERDIR=$HOME/.opendcs
fi
export DCSTOOL_USERDIR

if [ ! -d "$DCSTOOL_USERDIR" ]; then
    echo "Creating Local User Directory and initial properties in ${DCSTOOL_USERDIR}" 1>&2
    echo "The default XML database has been copied to this directory." 1>&2
    mkdir -p $DCSTOOL_USERDIR
    cp $DH/decodes.properties $DCSTOOL_USERDIR/user.properties
    cp -r $DH/edit-db $DCSTOOL_USERDIR/edit-db
fi

# Build classpath
CP=$DH/bin/opendcs.jar

# If a user-specific 'dep' (dependencies) directory exists, then
# add all the jars therein to the classpath.
if [ "$CP_SHARED_JAR_DIR" != "" ]; then
  CP=$CP:$CP_SHARED_JAR_DIR/*
  echo "The need of the CP_SHARED_JAR_DIR is variable superseded by using a " 1>&2
  echo "DCSTOOL_USERDIR for configuration. Support for this variable will" 1>&2
  echo "be moved in a future release. Please update your configuration." 1>&2
fi

if [ -d "$DCSTOOL_USERDIR/dep" ]; then
  CP=$CP:$DCSTOOL_USERDIR/dep/*
fi
CP=$CP:$DH/dep/*

if [ -z "$DCSTOOL_USERDIR/logback.xml" ]; then
  LOGBACK="$LOGBACK -Dlogback.configurationFile=$DCSTOOL_USERDIR/logback.xml"
else
  LOGBACK="$LOGBACK -Dlogback.configurationFile=$DCSTOOL_HOME/logback.xml"
fi

APP_NAME=$1
LOG_FILE=""
LOG_LEVEL="-DLOG_LEVEL=info"

ARGS=""
while [[ $# -gt 0 ]]; do
  OPTIND=1
  if getopts ":a:l:d:p:" opt "$@"; then
    case $opt in
      a)
      APP_NAME=${OPTARG}
      ARGS="$ARGS -a ${APP_NAME}" # need to put this back if it exists
      ;;
      l) LOG_FILE="-DLOG_FILE=${OPTARG}" ;;
      d)
        level=$OPTARG
        levelStr="info"
        case $level in
          "-2") levelStr="ERROR" ;;
          "-1") levelStr="WARN" ;;
          "0") levelStr="INFO" ;;
          "1") levelStr="DEBUG" ;;
          "2") levelStr="TRACE" ;;
          "3") levelStr="TRACE" ;;
        esac
        LOG_LEVEL="-DLOG_LEVEL=${levelStr}" ;;
      p)
        # may be a -p option or it might be the -pp flag
        if [ $OPTARG == "p" ]; then
          ARGS="$ARGS -pp"
          shift # skip ahead to the value
          ARGS="$ARGS $1"
          echo "$1"
        else
          ARGS="$ARGS -p $OPTARG"
        fi
        ;;
      :) ARGS="$ARGS -$OPTARG" ;;
      \?)
        if [ "$OPTARG" == "D" ]; then
          shift
          ARGS="$ARGS $1"
        elif [ "$OPTARG" == "P" ]; then
          shift
          ARGS="$ARGS $1"
        else
          ARGS="$ARGS -$OPTARG"
        fi
        ;;
      *) ARGS="$ARGS $opt" ;;
      esac
    shift $((OPTIND - 1))
    unset OPTIND
  else
    ARGS="$ARGS $1"
    shift
  fi
done

if [[ -z "$LOGBACK_OVERRIDE" ]]; then
  LOGBACK="$LOGBACK_OVERRIDE"
else
  LOGBACK="$LOGBACK -DAPP_NAME=${APP_NAME} $LOG_FILE $LOG_LEVEL"
fi

cmd="java -Xms120m $DECJ_MAXHEAP $DECJ_OPTS -cp $CP -DDCSTOOL_HOME=$DH -DDECODES_INSTALL_DIR=$DH -DDCSTOOL_USERDIR=$DCSTOOL_USERDIR $LOGBACK $ARGS"

eval $cmd
